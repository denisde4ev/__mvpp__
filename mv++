#!/bin/bash
#!/usr/bin/env ash
set -u

script_dir=${0%/*}; : "${script_dir:=/}"

. "$script_dir"/config-vars.sh

o=${0##*/}

. "$script_dir"/prints.sh

case $o in
	# mv|mv++|mvpp) mode=mv;;
	ln|ln++|lnpp) mode=ln;;
	cp|cp++)      mode=cp;;
	mv-ln)        mode=mv-ln;;
	*) err "err, unmatched mode";;
esac


flag_i=''
flag_f=''
flag_v=''
flag_n=''
flag_t=''
flag_Q=''
flag_V=''
flag_F=3 # todo: dont use flag var like this

. "$script_dir"/parse-args.sh

. "$script_dir"/wrappers.sh

. "$script_dir"/prompt.sh


. "$script_dir"/test-file-fns.sh

sources=''
# fill $sources from arguments (1 arg to 1 char)
for i; do sources=${sources}$(file_type "$i"); done

source_missing=0
case $sources in *z*) # if 1 missing file
	case $sources in
		#                                            if (prompt get err) or (answer is equal to y)
		*[!z]*) source_missing=1; prompt n3 "Some surce files doesn't exist, exit now?";;
		*)      source_missing=9; prompt y3  "All surce files doesn't exist, exit now?";;
	esac
	case $? in
		0) exit 2;;
		3) exit;;
		# exit using last exit status only when 0 or 3
	esac
esac


case $flag_t in # ensure $target_d and $target has value
	1) target=${target_d%/}/;;
	*)
		case $target in
			'') target_d=''; err "vars 'target_d' and 'target' can't be empty";;
			*/) target_d=${target%/};;
			*/*)
				#case $# in # TODO: should it be romoved, this lines?
				#	2) ;;
				#	*) err "dont use target without '/' at the , use --help for usage"
				#esac
				target_d=${target%/*}
			;;
			*) target_d=.;;
		esac
	;;
esac

# case $flag_F:$flag_f in 1:1) i=0

case $(file_type "${target_d%/}") in # ensure $target_d is dir
	d) ;; # $target dir is dir, all ok
	z)
		if prompt y0 "create target directory: '$target_d'"; then
			mkdir_ -p -- "$target_d" || err_code mkdir
		else
			err "can't continue without non existing target directory"
		fi
	;;
	.)
		prompt n$flag_F \
			"target directory already exist and is not a directory," \
			"do you want to ${bold}delete/backup${reset} it?" \
		|| exit

		prinftf %s\\n "what operitoin should be done to '$target_d'" >&2
		if prompt n3 'delete?'; then
			rm_ -- "$target_d" || err_code rm
		elif prompt n3 "rename by appending '~' to name ${bold}(backup)${reset}?"; then
			does_not_exist "$target_d"~ || err "err '${target_d}~' already exist" 7
			mvT_ -- "$target_d" "$target_d"~ || err_code mv
		fi
		mkdir_ -- "$target_d" || err_code mkdir
	;;
esac


tmp=~$$~

mv_swap() {
	[ -e "$1$tmp" ] && err "file '$1$tmp' should not exist"
	mvT_ -- "$1" "$1$tmp" && \
	mvT_ -- "$2" "$1" && \
	mvT_ -- "$1$tmp" "$2"
}


# TODOs:
# - treat - as stdin and use cat
# - add (-m 777) for mode option
# - add -F arswer yes for action questions, -F + -f means remeve files that are in target
# - don't alow normal mv when target is not target directory *[!/] and target exist
# - allow to use . as target dir without 'mv++ a ./' "./"


target_type=$(case $flag_t in 1) echo D;;*) file_type "$target"; esac)
files=$source_missing:$target_type
info "--$files--"
case $mode in
	mv)

		case $files in [!Z]:[!zD]) # (at least 1 exist):(exist and is not flag_t)

			case $target in *[!/])
				case $# in
					0) ;; # todo: does 0 sources have to throw err
					1)

						main_prompt "swap files?" && {
							mv_swap "$@" "$target" || err_code mv_swap
							exit
						}
					;;

				esac
			esac

		esac

		# { # test if source is in target directory

		# 	for i; do
		# 		case $i in
		# 	done

		# }


		case $files in [!zZ]:[zD]) #when source exist and targt does not, (not including any target dirctory)

			main_prompt "use regular mv?" && {
				mvT_ "$@" "$target" || err_code mv
				exit
			}

		esac
	;;
	ln) # todo: check to update link
		echo match
	;;
	*)
		echo not match
	;;
esac

echo NOTHING TO DO
exit 111
